package coffeeshop.menu

import coffeeshop.Cart
import coffeeshop.CashDesk
import coffeeshop.isNumeric
import coffeeshop.main
import kotlin.system.exitProcess

class DesBakery {
    fun desbakOrder(cart: Cart) {
        val cashDesk = CashDesk() // 주문조회
        val cart = Cart() // 카트

        val pickList = arrayListOf<PickList>()// 메뉴 담아서 픽하기
        val cartList = arrayListOf<Cart>() // 픽한 메뉴 목록으로 출력


        println("어서오세요! 고객님.  |  현재 주문 대기 수는 [ 0 ] 명 입니다.")
        println(" ---------------------------------------------------------------------------------------------------")
        println("[ D & B Menu ]  [Price]  [Menu description]")
        println(" ---------------------------------------------------------------------------------------------------")
        println("1. 블랙티 무스     8,000  블랙티를 진하게 우려낸 초콜릿 무스와 피치 콤포트가 조화를 이루는 무스 케이크.\n" +
                "2. 캐롯 케이크     7,000  당근과 오렌지 필, 묵직한 크림치즈를 풍성하게 레이어한 영국식 티 케이크.\n" +
                "3. 레드벨벳 케이크  8,000  레드벨벳 시트에 과일로 상큼함을 더하고, 진한 크림치즈로 아이싱한 케이크.\n" +
                "4. 슈크림         2,000  바삭한 슈 속에 달콤한 바닐라 크림이 든 디저트.\n" +
                "5. 소금빵         3,000  풍부한 버터의 풍미와 짭짤한 소금이 어우러진 빵.\n")
        println(" ---------------------------------------------------------------------------------------------------")
        println(":: MENU ::                                                 8. 메인으로  |  9. 주문조회  |  0. 종료  ")
        println(" ---------------------------------------------------------------------------------------------------")

        while (true) {
            val cPick = readln() // 메뉴 고르기
            if (!cPick.isNumeric()) { // 숫자 외 입력시 오류처리
                println(" ---------------------------------------------------------------------------------------------------")
                println("                                  메뉴 입력은 숫자만 해주세요.")
                println(" ---------------------------------------------------------------------------------------------------")
                continue
            }

            when (cPick.toInt()) {
                1 -> {
                    val blackTea = PickList("블랙티무스", 8000, 1)
                    println(" ---------------------------------------------------------------------------------------------------")
                    println("                           선택하신 메뉴는 ${blackTea.menuName}, ${blackTea.menuPrice}원 입니다.")
                    println("                                 구입하실 갯수를 입력해 주세요.")
                    println(" ---------------------------------------------------------------------------------------------------")
                    val cPick = readln() // 갯수 선택
                    if (!cPick.isNumeric()) { // 숫자 외 입력시 오류처리
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                  메뉴 입력은 숫자만 해주세요.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        continue
                    }

                    // 선택한 품목, 값, 합계, 잔액 표시
                    if (cPick.toInt() >= 1) {
                        val price = PickList("블랙티무스", 8000, 1 * cPick.toInt())
                        cart.addPickList(price) // 윗줄에서 계산한 값을 보여줌
                        price.priceDisplayInfo() // 가격 합계 보여줌

                        Thread.sleep(2000) // 너무 빨리 넘어가서 대기시간
                        return
                    } else {
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                   1보다 적은 갯수는 선택할 수 없습니다.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        return
                    }
                }

                2 -> {
                    val Carrot = PickList("캐롯케이크", 7000, 1)
                    println(" ---------------------------------------------------------------------------------------------------")
                    println("                           선택하신 메뉴는 ${Carrot.menuName}, ${Carrot.menuPrice}원 입니다.")
                    println("                                 구입하실 갯수를 입력해 주세요.")
                    println(" ---------------------------------------------------------------------------------------------------")

                    val cPick = readln() // 갯수 선택
                    if (!cPick.isNumeric()) { // 숫자 외 입력시 오류처리
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                  메뉴 입력은 숫자만 해주세요.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        continue
                    }

                    // 선택한 품목, 값, 합계, 잔액 표시
                    if (cPick.toInt() >= 1) {
                        val price = PickList("캐롯케이크", 7000, 1 * cPick.toInt())
                        cart.addPickList(price) // 윗줄에서 계산한 값을 보여줌
                        price.priceDisplayInfo() // 가격 합계 보여줌

                        Thread.sleep(2000) // 너무 빨리 넘어가서 대기시간
                        return
                    } else {
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                   1보다 적은 갯수는 선택할 수 없습니다.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        return
                    }
                }

                3 -> {
                    val redVelvet = PickList("레드벨벳케이크", 8000, 1)
                    println(" ---------------------------------------------------------------------------------------------------")
                    println("                           선택하신 메뉴는 ${redVelvet.menuName}, ${redVelvet.menuPrice}원 입니다.")
                    println("                                 구입하실 갯수를 입력해 주세요.")
                    println(" ---------------------------------------------------------------------------------------------------")

                    val cPick = readln() // 갯수 선택
                    if (!cPick.isNumeric()) { // 숫자 외 입력시 오류처리
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                  메뉴 입력은 숫자만 해주세요.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        continue
                    }

                    // 선택한 품목, 값, 합계, 잔액 표시
                    if (cPick.toInt() >= 1) {
                        val price = PickList("레드벨벳케이크", 8000, 1 * cPick.toInt())
                        cart.addPickList(price) // 윗줄에서 계산한 값을 보여줌
                        price.priceDisplayInfo() // 가격 합계 보여줌

                        Thread.sleep(2000) // 너무 빨리 넘어가서 대기시간
                        return
                    } else {
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                   1보다 적은 갯수는 선택할 수 없습니다.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        return
                    }
                }

                4 -> {
                    val creamPuff = PickList("슈크림", 2000, 1)
                    println(" ---------------------------------------------------------------------------------------------------")
                    println("                           선택하신 메뉴는 ${creamPuff.menuName}, ${creamPuff.menuPrice}원 입니다.")
                    println("                                 구입하실 갯수를 입력해 주세요.")
                    println(" ---------------------------------------------------------------------------------------------------")

                    val cPick = readln() // 갯수 선택
                    if (!cPick.isNumeric()) { // 숫자 외 입력시 오류처리
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                  메뉴 입력은 숫자만 해주세요.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        continue
                    }

                    // 선택한 품목, 값, 합계, 잔액 표시
                    if (cPick.toInt() >= 1) {
                        val price = PickList("슈크림", 2000, 1 * cPick.toInt())
                        cart.addPickList(price) // 윗줄에서 계산한 값을 보여줌
                        price.priceDisplayInfo() // 가격 합계 보여줌

                        Thread.sleep(2000) // 너무 빨리 넘어가서 대기시간
                        return
                    } else {
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                   1보다 적은 갯수는 선택할 수 없습니다.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        return
                    }
                }

                5 -> {
                    val saltBread = PickList("소금빵", 3000, 1)
                    println(" ---------------------------------------------------------------------------------------------------")
                    println("                           선택하신 메뉴는 ${saltBread.menuName}, ${saltBread.menuPrice}원 입니다.")
                    println("                                 구입하실 갯수를 입력해 주세요.")
                    println(" ---------------------------------------------------------------------------------------------------")

                    val cPick = readln() // 갯수 선택
                    if (!cPick.isNumeric()) { // 숫자 외 입력시 오류처리
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                  메뉴 입력은 숫자만 해주세요.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        continue
                    }

                    // 선택한 품목, 값, 합계, 잔액 표시
                    if (cPick.toInt() >= 1) {
                        val price = PickList("소금빵", 3000, 1 * cPick.toInt())
                        cart.addPickList(price) // 윗줄에서 계산한 값을 보여줌
                        price.priceDisplayInfo() // 가격 합계 보여줌

                        Thread.sleep(2000) // 너무 빨리 넘어가서 대기시간
                        return
                    } else {
                        println(" ---------------------------------------------------------------------------------------------------")
                        println("                                   1보다 적은 갯수는 선택할 수 없습니다.")
                        println(" ---------------------------------------------------------------------------------------------------")
                        return
                    }
                }

                8 -> return main()

                9 -> cashDesk.orderList(pickList)

                0 -> exitProcess(0)

                else -> {
                    println(" ---------------------------------------------------------------------------------------------------")
                    println("                                       잘못된 입력입니다.")
                    println(" ---------------------------------------------------------------------------------------------------")
                    return
                }
            }
        }
    }
}